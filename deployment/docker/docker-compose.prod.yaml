# Ottawa RAG Chatbot - Docker Compose Configuration
# Production-ready container orchestration

version: '3.8'

services:
  # Main chatbot application
  ottawa-chatbot:
    build:
      context: ../..  # Build from project root
      dockerfile: deployment/docker/Dockerfile
      target: production  # Use production stage
      args:
        INSTALL_DEV_DEPS: false
    
    image: ottawa-rag-chatbot:latest
    container_name: ottawa-chatbot-app
    
    restart: unless-stopped
    
    ports:
      - "7860:7860"  # Gradio interface
      - "8080:8080"  # Health check endpoint
    
    environment:
      # Core configuration
      - PYTHONUNBUFFERED=1
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
      
      # Application settings
      - ENABLE_ANALYTICS=true
      - ENABLE_ADMIN=true
      - MAX_CHUNKS=5
      - TEMPERATURE=0.1
      
      # API configuration (set in .env file)
      - GROQ_API_KEY=${GROQ_API_KEY}
    
    env_file:
      - ../../.env  # Load from project root .env
    
    volumes:
      # Persistent data storage
      - chatbot_data:/app/data
      - chatbot_logs:/app/logs
      
      # Optional: Mount local data for development
      # - ../../data:/app/data:ro  # Read-only data mount
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Network configuration
    networks:
      - ottawa-network

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: ottawa-redis
  #   restart: unless-stopped
  #   
  #   ports:
  #     - "6379:6379"
  #   
  #   volumes:
  #     - redis_data:/data
  #   
  #   command: redis-server --appendonly yes
  #   
  #   networks:
  #     - ottawa-network

  # Optional: Nginx reverse proxy (uncomment if needed)
  # nginx:
  #   image: nginx:alpine
  #   container_name: ottawa-nginx
  #   restart: unless-stopped
  #   
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   
  #   depends_on:
  #     - ottawa-chatbot
  #   
  #   networks:
  #     - ottawa-network

# Development override service
  ottawa-chatbot-dev:
    extends: ottawa-chatbot
    build:
      target: development  # Use development stage
      args:
        INSTALL_DEV_DEPS: true
    
    # Override for development
    image: ottawa-rag-chatbot:dev
    container_name: ottawa-chatbot-dev
    
    environment:
      - DEBUG=true
    
    volumes:
      # Mount source code for live editing
      - ../../src:/app/src
      - ../../data:/app/data
      
      # Mount for development
      - chatbot_dev_logs:/app/logs
    
    # Development port mapping
    ports:
      - "7861:7860"  # Different port for dev
      - "8081:8080"  # Different health check port
    
    profiles:
      - development  # Only start with --profile development

# Named volumes for data persistence
volumes:
  chatbot_data:
    driver: local
    driver_opts:
      type: none
      device: ./data
      o: bind
  
  chatbot_logs:
    driver: local
  
  chatbot_dev_logs:
    driver: local
  
  # redis_data:
  #   driver: local

# Custom network
networks:
  ottawa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16